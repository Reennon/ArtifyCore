Index: ModuleHandler.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ArtifyCore\r\n{\r\n    internal static partial class ModuleHandler\r\n    {\r\n        internal static readonly Dictionary<Type, ILinkerBaseFields> Modules = new()\r\n        {\r\n            {typeof(Dispatcher), new Dispatcher()},\r\n            {typeof(InputHandler), new InputHandler()}\r\n        };\r\n    }\r\n    \r\n    internal static partial class IOHandler<T>\r\n        where T : ILinkerBaseFields\r\n    {\r\n        //private static readonly ILinkerBaseFields LinkedTo = typeof(T).;\r\n\r\n        internal static void TInputInvoke( String command) \r\n        {\r\n            (ModuleHandler\r\n                .Modules[typeof(T)] is T ? (T) ModuleHandler\r\n                .Modules[typeof(T)] : default)?.InputInvoker(command);\r\n            \r\n            // #nullable enable\r\n            // var method = typeof(T).GetMethod(\"InputInvoker\");\r\n            // var generic = method?.MakeGenericMethod(typeof(String));\r\n            // generic?.Invoke(typeof(T), new Object?[] {command});\r\n            // #nullable disable\r\n        }   \r\n    \r\n    \r\n        internal static String TIOutputInvoke(T type, String command) \r\n        {\r\n            return (ModuleHandler\r\n                .Modules[typeof(T)] is T ? (T) ModuleHandler\r\n                .Modules[typeof(T)] : default)?.OutputInvoker(command);\r\n            \r\n            //return type.OutputInvoker(command);\r\n        \r\n            // #nullable enable\r\n            //         var method = typeof(T).GetMethod(\"OutputInvoker\");\r\n            //         var generic = method?.MakeGenericMethod(typeof(String));\r\n            //         return generic?.Invoke(typeof(T), new Object?[] {command}) as String;\r\n            // #nullable disable\r\n        }  \r\n    \r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ModuleHandler.cs b/ModuleHandler.cs
--- a/ModuleHandler.cs	(revision 1b5d92a89b787c9dca68b161ab7bf2535094e759)
+++ b/ModuleHandler.cs	(date 1606233064669)
@@ -7,7 +7,7 @@
     {
         internal static readonly Dictionary<Type, ILinkerBaseFields> Modules = new()
         {
-            {typeof(Dispatcher), new Dispatcher()},
+            {typeof(Dispatcher), Dispatcher.GetInstance()},
             {typeof(InputHandler), new InputHandler()}
         };
     }
Index: Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Threading.Tasks;\r\nusing ArtifyCore;\r\n\r\nvar c = new Dispatcher();\r\nConsole.ReadKey();\r\n//Task.WaitAll();\r\n\r\n\r\n\r\ninternal static partial class ModuleHandler\r\n{\r\n    \r\n}\r\n\r\n\r\n\r\ninternal sealed class Dispatcher : ILinkerBaseFields\r\n{\r\n\r\n    private static readonly Dispatcher.Body _body;\r\n    private static readonly Dispatcher.Initializer _initializer;\r\n    private static readonly Dispatcher.InvokeHandler _invokeHandler;\r\n\r\n    static Dispatcher()\r\n    {\r\n        _body = new Body();\r\n        \r\n        _initializer = new Initializer();\r\n        _invokeHandler = new InvokeHandler();\r\n        _initializer.Invoke(\"\");\r\n        \r\n        IOHandler<InputHandler>.TInputInvoke(\"GetName\");\r\n        IOHandler<InputHandler>.TInputInvoke(\"GetName\");\r\n        //IOHandler<InputHandler>.TInputInvoke(ArtifyCore.ModuleHandler.Modules[typeof(InputHandler)] as InputHandler, \"GetName\");\r\n        \r\n        \r\n        // IOHandler<InputHandler>\r\n        //     .TInputInvoke(\r\n        //         // ArtifyCore\r\n        //         // .ModuleHandler\r\n        //         // .Modules[typeof(InputHandler)] \r\n        //         //     as InputHandler\r\n        //         // ,\r\n        //         \"GetName\");\r\n        \r\n        \r\n        //_inputHandler = new InputHandler();\r\n        //Console.WriteLine(typeof(Dispatcher)+\"!\");\r\n        //throw new Exception();\r\n    }\r\n    \r\n    public void NewData<T>() where T : new()\r\n    {\r\n        \r\n    }\r\n\r\n    private sealed class Initializer : IModuleInitializer, IInputOutputHandler\r\n    {\r\n        public void Invoke(String str = \"\")\r\n        {\r\n            _body.Start();\r\n            Console.WriteLine($\"{base.ToString()} has started!\");\r\n            //throw new NotImplementedException();\r\n        }\r\n        public void Invoke() => Invoke(String.Empty);\r\n    }\r\n\r\n\r\n    private sealed class Body : IModuleBody\r\n    {\r\n        //public void Controller();\r\n        \r\n        public void InputOutput(String command)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        public void Update()\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        public void Start()\r\n        {\r\n            Console.WriteLine($\"{base.ToString()} has started!\");\r\n            //throw new NotImplementedException();\r\n        }\r\n        \r\n        public String GetStr() => String.Empty;\r\n        \r\n    }\r\n\r\n    private sealed class InvokeHandler : IInvokeHandler\r\n    {\r\n        \r\n        public Action SwitchInputAction(String command) =>\r\n            command switch\r\n            {\r\n                _ => _body.Start\r\n            };\r\n        \r\n        public Func<String> SwitchOutputAction(String command) =>\r\n            command switch\r\n            {\r\n                _ => _body.GetStr\r\n            };\r\n        \r\n    }\r\n\r\n    public  void InputInvoker(String command)\r\n    {\r\n        var action = _invokeHandler.SwitchInputAction(command);\r\n        action();\r\n    }\r\n\r\n    public String OutputInvoker(String command)\r\n    {\r\n        var func = _invokeHandler.SwitchOutputAction(command);\r\n        return func();\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Program.cs b/Program.cs
--- a/Program.cs	(revision 1b5d92a89b787c9dca68b161ab7bf2535094e759)
+++ b/Program.cs	(date 1606233098734)
@@ -1,18 +1,29 @@
 using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Reflection;
+using System.Reflection.Metadata;
 using System.Threading.Tasks;
 using ArtifyCore;
 
-var c = new Dispatcher();
+
+
+Dispatcher.GetInstance();
 Console.ReadKey();
+
+//var c = new Dispatcher();
+//Array.ForEach(ModuleHandler.Modules.ToArray(),x=>x.GetType());
+
+//var c = Dispatcher.GetInstance();
+//-Dispatcher.GetInstance();
+// Console.WriteLine(c.GetHashCode());
+// Console.WriteLine(ModuleHandler.Modules[typeof(Dispatcher)].GetHashCode());
+// Console.WriteLine(c.GetHashCode());
+//-Console.ReadKey();
 //Task.WaitAll();
 
 
 
-internal static partial class ModuleHandler
-{
-    
-}
-
 
 
 internal sealed class Dispatcher : ILinkerBaseFields
@@ -21,11 +32,18 @@
     private static readonly Dispatcher.Body _body;
     private static readonly Dispatcher.Initializer _initializer;
     private static readonly Dispatcher.InvokeHandler _invokeHandler;
+    private static Dispatcher _self;
 
+
+    private Dispatcher(){}
+
+    public static Dispatcher GetInstance() 
+        => _self ??= new Dispatcher();
+    
+    
     static Dispatcher()
     {
         _body = new Body();
-        
         _initializer = new Initializer();
         _invokeHandler = new InvokeHandler();
         _initializer.Invoke("");
@@ -122,3 +140,10 @@
 }
 
 
+namespace ArtifyCore
+{
+    internal static partial class ModuleHandler
+    {
+    
+    }
+}
\ No newline at end of file
